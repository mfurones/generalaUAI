<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Label1.Text" xml:space="preserve">
    <value>Cada jugador puede hacer hasta tres tiros por turno. Hay 11 vueltas por juego, excepto cuando un jugador hace generala servida. El participante debe hacer una categoría por vuelta. Por lo cual, al final del juego cada jugador tendrá puntaje en cada una de las diez categorías.

El jugador comienza tirando los cinco dados. Si obtiene en los cinco el mismo número habrá hecho generala servida y automáticamente gana el juego. Aun cuando se trate de un número en el cual ya haya hecho puntaje, se computará como generala servida.

Si en su primer tiro el jugador hace un "juego mayor", apartará el o los dados que desee conservar y hará su segundo tiro con los restantes. Si así lo quiere, puede arrojar nuevamente los cinco dados, pues no está obligado todavía a elegir una categoría

Del mismo modo, en su segundo tiro apartará los dados que le resulten más convenientes y tirará con los restantes por tercera y última vez.

Si el jugador hace un "juego mayor" dentro de sus tres tiros, siempre que la categoría elegida esté abierta, se anotará el puntaje en la casilla correspondiente. (Como se explica en puntaje, el jugador que hace un juego mayor en el primer tiro de su turno saca mayor puntaje que quien necesita dos o tres para lograrlo.)

Si no hace un "juego mayor" en sus tres tiros, debe elegir una categoría de números (1 a 6) y anotar el puntaje en la casilla correspondiente.

Después que el jugador haya completado su vuelta y anotado su puntaje, pasa su turno al jugador de la columna derecha y el juego continua.

Puntaje: Para calcular el puntaje correspondiente a una categoría de numero, se multiplica el total de dados donde éste aparece por dicho número. Por ejemplo: tres 6 valen 18 puntos para el seis; dos 4 valen 8 puntos para el cuatro

Los valores de los "juegos mayores" son los siguientes:

Generala: se forma cuando después del segundo o tercer tiro se logran los cinco dados con un mismo número y vale 50 puntos. Cuando esto se logra de un solo tiro, se llama generala servida y el jugador automáticamente gana el juego.

Poker: (cuatro de un mismo número). Si es servido vale 45 puntos, en caso contrario 40

Full: (tres de un mismo número y un par). Si es servido vale 35 puntos, de lo contrario 30.

Escalera: (1-2-3-4-5 ó 2-3-4-5-6). Si es servida se le otorgan 25 puntos y si no lo es, 20

Cuando se hace generala, poker o full, los valores que indican los dados no se tienen en cuenta para el puntaje. Por ejemplo, sea la generala de 1 o de 6, vale 50 puntos

Nótese sin embargo, que si un jugador ha hecho generala y luego saca cinco de un mismo número puede anotarse punta, a en dicho número si todavía no lo ha hecho. Por ejemplo, si un jugador ya ha hecho generala y saca cinco 6, se anotará 30 puntos al seis.

Cuando se han completado las 11 vueltas del juego, se suman los puntajes. El que mayor puntaje obtenga, gana el juego.</value>
  </data>
</root>